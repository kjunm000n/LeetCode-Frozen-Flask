<!DOCTYPE html>
<html lang="en">
<head>
    
    <link href="/static/prism.css" rel="stylesheet" />

    <meta charset="UTF-8">
    <title> 
Problem 3
 </title>
</head>
<body>

    <h3>Problem Description Link</h3>
    <ul><li><a href="https://leetcode.com/problems/longest-substring-without-repeating-characters">LeetCode Link (Problem 3)</a></li></ul>
    <h3>Problem Code</h3>
    <pre><code class="language-python"># [3] Longest Substring Without Repeating Characters

import string
import random
from typing import Optional, Union, Any, List, Tuple, Set, Dict

from definitions import debug_mode
from solutions.interface import ProblemInterface, Difficulty


class Problem3(ProblemInterface):
    difficulty = Difficulty.Medium
    name = &#39;longest-substring-without-repeating-characters&#39;

    def insert(self, dic: Dict[str, int], k: str) -&gt; bool:
        u&#34;&#34;&#34; time complexity: O(1) &#34;&#34;&#34;
        if k not in dic or dic[k] == 0:
            dic[k] = 1
            return False
        elif dic[k] &gt; 0:
            dic[k] += 1
            return True
        else:
            raise ValueError

    def remove(self, dic: Dict[str, int], k: str) -&gt; int:
        u&#34;&#34;&#34; time complexity: O(1) &#34;&#34;&#34;
        if k not in dic or dic[k] &lt; 1:
            raise ValueError
        dic[k] -= 1
        return dic[k]

    @ProblemInterface.time_check(debug_mode)
    def solution(self, s: str) -&gt; int:
        u&#34;&#34;&#34; time complexity: O(n) &#34;&#34;&#34;
        char_dict = dict()
        answer = 0
        front, back = 0, 0
        while back &lt; len(s):
            is_dup = self.insert(char_dict, s[back])
            back += 1
            if is_dup:
                while True:
                    remain = self.remove(char_dict, s[front])
                    front += 1
                    if s[back - 1] == s[front - 1] and remain &lt;= 1 or front &gt;= back:
                        break
            if back - front &gt; answer:
                answer = back - front
        return answer

    @ProblemInterface.time_check(debug_mode)
    def comparison_solution(self, s: str) -&gt; int:
        u&#34;&#34;&#34; time complexity: O(n^2) &#34;&#34;&#34;
        answer = &#39;&#39;
        for i in range(len(s)):
            for j in range(i + 1, len(s) + 1):
                if len(set(list(s[i:j]))) &lt; j - i:
                    continue
                elif len(answer) &lt; j - i:
                    answer = s[i:j]
        return len(answer)


    def test_one_random(self):
        n = random.randint(0, 100)
        s = &#39;&#39;.join([random.choice(string.ascii_lowercase) for _ in range(n)])
        answer1 = self.solution(s)
        answer2 = self.comparison_solution(s)

        print(answer1, answer2)
        assert answer1 == answer2
</code></pre>
    <script src="/static/prism.js"></script>

</body>
</html>